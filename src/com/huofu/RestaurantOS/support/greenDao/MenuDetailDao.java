package com.huofu.RestaurantOS.support.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENU_DETAIL.
*/
public class MenuDetailDao extends AbstractDao<MenuDetail, Void> {

    public static final String TABLENAME = "MENU_DETAIL";

    /**
     * Properties of entity MenuDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MenuDateId = new Property(0, String.class, "menuDateId", false, "MENU_DATE_ID");
        public final static Property MenuId = new Property(1, Long.class, "menuId", false, "MENU_ID");
        public final static Property WidgetId = new Property(2, Integer.class, "widgetId", false, "WIDGET_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property X = new Property(5, Double.class, "x", false, "X");
        public final static Property Y = new Property(6, Double.class, "y", false, "Y");
        public final static Property Price = new Property(7, Integer.class, "price", false, "PRICE");
        public final static Property FontSize = new Property(8, Integer.class, "fontSize", false, "FONT_SIZE");
        public final static Property FontColor = new Property(9, String.class, "fontColor", false, "FONT_COLOR");
        public final static Property BackgroundColor = new Property(10, String.class, "backgroundColor", false, "BACKGROUND_COLOR");
        public final static Property Distance = new Property(11, Double.class, "distance", false, "DISTANCE");
        public final static Property Addtiontal = new Property(12, String.class, "addtiontal", false, "ADDTIONTAL");
        public final static Property BindToItemServerId = new Property(13, Integer.class, "BindToItemServerId", false, "BIND_TO_ITEM_SERVER_ID");
        public final static Property Redundance1 = new Property(14, String.class, "redundance1", false, "REDUNDANCE1");
        public final static Property Redundance2 = new Property(15, String.class, "redundance2", false, "REDUNDANCE2");
        public final static Property Redundance3 = new Property(16, String.class, "redundance3", false, "REDUNDANCE3");
        public final static Property Redundance4 = new Property(17, String.class, "redundance4", false, "REDUNDANCE4");
        public final static Property Redundance5 = new Property(18, String.class, "redundance5", false, "REDUNDANCE5");
    };


    public MenuDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENU_DETAIL' (" + //
                "'MENU_DATE_ID' TEXT," + // 0: menuDateId
                "'MENU_ID' INTEGER," + // 1: menuId
                "'WIDGET_ID' INTEGER," + // 2: widgetId
                "'TYPE' TEXT," + // 3: type
                "'NAME' TEXT," + // 4: name
                "'X' REAL," + // 5: x
                "'Y' REAL," + // 6: y
                "'PRICE' INTEGER," + // 7: price
                "'FONT_SIZE' INTEGER," + // 8: fontSize
                "'FONT_COLOR' TEXT," + // 9: fontColor
                "'BACKGROUND_COLOR' TEXT," + // 10: backgroundColor
                "'DISTANCE' REAL," + // 11: distance
                "'ADDTIONTAL' TEXT," + // 12: addtiontal
                "'BIND_TO_ITEM_SERVER_ID' INTEGER," + // 13: BindToItemServerId
                "'REDUNDANCE1' TEXT," + // 14: redundance1
                "'REDUNDANCE2' TEXT," + // 15: redundance2
                "'REDUNDANCE3' TEXT," + // 16: redundance3
                "'REDUNDANCE4' TEXT," + // 17: redundance4
                "'REDUNDANCE5' TEXT);"); // 18: redundance5
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENU_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MenuDetail entity) {
        stmt.clearBindings();
 
        String menuDateId = entity.getMenuDateId();
        if (menuDateId != null) {
            stmt.bindString(1, menuDateId);
        }
 
        Long menuId = entity.getMenuId();
        if (menuId != null) {
            stmt.bindLong(2, menuId);
        }
 
        Integer widgetId = entity.getWidgetId();
        if (widgetId != null) {
            stmt.bindLong(3, widgetId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(6, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(7, y);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(8, price);
        }
 
        Integer fontSize = entity.getFontSize();
        if (fontSize != null) {
            stmt.bindLong(9, fontSize);
        }
 
        String fontColor = entity.getFontColor();
        if (fontColor != null) {
            stmt.bindString(10, fontColor);
        }
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(11, backgroundColor);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(12, distance);
        }
 
        String addtiontal = entity.getAddtiontal();
        if (addtiontal != null) {
            stmt.bindString(13, addtiontal);
        }
 
        Integer BindToItemServerId = entity.getBindToItemServerId();
        if (BindToItemServerId != null) {
            stmt.bindLong(14, BindToItemServerId);
        }
 
        String redundance1 = entity.getRedundance1();
        if (redundance1 != null) {
            stmt.bindString(15, redundance1);
        }
 
        String redundance2 = entity.getRedundance2();
        if (redundance2 != null) {
            stmt.bindString(16, redundance2);
        }
 
        String redundance3 = entity.getRedundance3();
        if (redundance3 != null) {
            stmt.bindString(17, redundance3);
        }
 
        String redundance4 = entity.getRedundance4();
        if (redundance4 != null) {
            stmt.bindString(18, redundance4);
        }
 
        String redundance5 = entity.getRedundance5();
        if (redundance5 != null) {
            stmt.bindString(19, redundance5);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MenuDetail readEntity(Cursor cursor, int offset) {
        MenuDetail entity = new MenuDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // menuDateId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // menuId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // widgetId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // x
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // y
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // fontSize
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fontColor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backgroundColor
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // distance
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addtiontal
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // BindToItemServerId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // redundance1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // redundance2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // redundance3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // redundance4
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // redundance5
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MenuDetail entity, int offset) {
        entity.setMenuDateId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMenuId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setWidgetId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setX(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setY(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFontSize(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFontColor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBackgroundColor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDistance(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setAddtiontal(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBindToItemServerId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRedundance1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRedundance2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRedundance3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRedundance4(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRedundance5(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MenuDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MenuDetail entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
